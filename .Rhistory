library(devtools)
build()
test()
library(roxygen2)
build()
load(grouR)
load(groupR)
library(groupR)
medianize(44)
usethis::use_testthat()
help(medianize)
??medianize
library(testthat)
input = c(1,2)
output = medianize(input)
expect_equal(output, c('LOW', 'HIGH'))
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
factor(
ifelse(val < medVal), 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
}
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
factor(
ifelse(val < medVal), 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
}
context("Medianize.R")
test_that('Should split two items in low-high using median as criteria', {
#Arrange
input = c(1,2)
#Act
output = medianize(input)
#Assert
expect_equal(output, c('LOW', 'HIGH'))
})
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
c(
factor(
ifelse(val < medVal), 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
}
context("Medianize.R")
test_that('Should split two items in low-high using median as criteria', {
#Arrange
input = c(1,2)
#Act
output = medianize(input)
#Assert
expect_equal(output, c('LOW', 'HIGH'))
})
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
}
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
)
}
context("Medianize.R")
test_that('Should split two items in low-high using median as criteria', {
#Arrange
input = c(1,2)
#Act
output = medianize(input)
#Assert
expect_equal(output, c('LOW', 'HIGH'))
})
output
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
)
}
input = c(1,2)
#Act
output = medianize(input)
#Assert
expect_equal(output, c('LOW', 'HIGH'))
output
input = c(1,2)
output = medianize(input)
expect_equal(output, c('LOW', 'HIGH'))
output
val = c(1,2)
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
medVal = median(val, na.rm = TRUE)
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
medVal
ifelse(val < medVal, 'LOW', 'HIGH')
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
val = c(1,4)
medVal = median(val, na.rm = TRUE)
c(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
medianize <- function(val){
medVal = median(val, na.rm = TRUE)
return(
factor(
ifelse(val < medVal, 'LOW', 'HIGH'),
levels = c('LOW', 'HIGH')
)
)
}
medianize(c(1,6))
